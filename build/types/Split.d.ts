/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SplitInterface extends Interface {
  functions: {
    calculate: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    claimOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    setCounterParty: TypedFunctionDescription<{
      encode([_counterParty]: [string]): string;
    }>;

    setParty: TypedFunctionDescription<{ encode([_party]: [string]): string }>;

    setRatio: TypedFunctionDescription<{
      encode([_ratio]: [BigNumberish]): string;
    }>;

    split: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class Split extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Split;
  attach(addressOrName: string): Split;
  deployed(): Promise<Split>;

  on(event: EventFilter | string, listener: Listener): Split;
  once(event: EventFilter | string, listener: Listener): Split;
  addListener(eventName: EventFilter | string, listener: Listener): Split;
  removeAllListeners(eventName: EventFilter | string): Split;
  removeListener(eventName: any, listener: Listener): Split;

  interface: SplitInterface;

  functions: {
    calculate(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "calculate(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCounterParty(
      _counterParty: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setParty(
      _party: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setParty(address)"(
      _party: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRatio(
      _ratio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRatio(uint256)"(
      _ratio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    split(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "split(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  calculate(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "calculate(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCounterParty(
    _counterParty: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCounterParty(address)"(
    _counterParty: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setParty(
    _party: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setParty(address)"(
    _party: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRatio(
    _ratio: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRatio(uint256)"(
    _ratio: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  split(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "split(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    calculate(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calculate(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setCounterParty(
      _counterParty: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setParty(
      _party: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setParty(address)"(
      _party: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRatio(
      _ratio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRatio(uint256)"(
      _ratio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    split(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "split(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
