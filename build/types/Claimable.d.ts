/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ClaimableInterface extends Interface {
  functions: {
    claimOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class Claimable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Claimable;
  attach(addressOrName: string): Claimable;
  deployed(): Promise<Claimable>;

  on(event: EventFilter | string, listener: Listener): Claimable;
  once(event: EventFilter | string, listener: Listener): Claimable;
  addListener(eventName: EventFilter | string, listener: Listener): Claimable;
  removeAllListeners(eventName: EventFilter | string): Claimable;
  removeListener(eventName: any, listener: Listener): Claimable;

  interface: ClaimableInterface;

  functions: {
    claimOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  claimOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    claimOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
